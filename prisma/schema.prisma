generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Owner {
  id            String          @id @default(uuid())
  nome          String
  cpf           String          @unique
  birthday      String
  email         String          @unique
  phoneNumber   String
  password      String
  establishment Establishment[]
  created_at    DateTime?       @default(now())
  updated_at    DateTime?       @default(now())
  lastLogin     DateTime?       @default(now())

  @@map("owner")
}

model Address {
  id              String         @id @default(uuid())
  street          String
  number_address  Int
  complement      String?
  neighborhood    String
  city            String
  state           String
  cep             String
  reference_point String
  establishment   Establishment?
  updated_at      DateTime?      @default(now())
  created_at      DateTime?      @default(now())

  @@map("address")
}

model AddressClient {
  id              String    @id @default(uuid())
  street          String
  number_address  Int
  complement      String?
  neighborhood    String
  city            String
  reference_point String
  state           String
  cep             String
  client          Client?
  updated_at      DateTime? @default(now())
  created_at      DateTime? @default(now())

  @@map("address_client")
}

model Establishment {
  id                String     @id @default(uuid())
  name              String
  phoneContact      String
  email_contact     String     @unique
  start_hour        String
  end_hour          String
  stop_hour_lunch   String?
  return_hour_lunch String?
  Owner             Owner      @relation(fields: [fk_owner_id], references: [id])
  fk_owner_id       String
  Address           Address    @relation(fields: [fk_id_address], references: [id])
  fk_id_address     String     @unique
  employee          Employee[]
  services          Services[]
  ordered           Ordered[]
  created_at        DateTime?  @default(now())
  updated_at        DateTime?  @default(now())

  @@map("establishment")
}

model Client {
  id            String         @id @default(uuid())
  nome          String
  email         String         @unique
  cpf           String         @unique
  birthday      String
  lastCut       DateTime?      @default(now())
  phoneNumber   String
  password      String
  AddressClient AddressClient? @relation(fields: [fk_id_address], references: [id])
  fk_id_address String?        @unique
  ordered       Ordered[]
  updated_at    DateTime?      @default(now())
  created_at    DateTime?      @default(now())
}

model Employee {
  id                  String        @id @default(uuid())
  nome                String
  email               String        @unique
  phoneNumber         String        @unique
  cpf                 String        @unique
  birthday            String
  start_hour          String
  end_hour            String
  stop_hour_lunch     String
  return_hour_lunch   String
  fk_establishment_id String
  establishment       Establishment @relation(fields: [fk_establishment_id], references: [id])
  Ordered             Ordered[]
  created_at          DateTime?     @default(now())
  updated_at          DateTime?     @default(now())
}

model Services {
  id                  String             @id @default(uuid())
  nome                String
  type                String
  duration            Float
  price               Float
  description         String
  fk_establishment_id String
  establishment       Establishment      @relation(fields: [fk_establishment_id], references: [id])
  ordered_Services    Ordered_Services[]
  created_at          DateTime?          @default(now())
  updated_at          DateTime?          @default(now())
}

model Ordered {
  id                  String             @id @default(uuid())
  appointment         String
  appointmentNow      DateTime?          @default(now())
  confirmed           Boolean            @default(false)
  finish              Boolean            @default(false)
  fk_client_id        String
  client              Client             @relation(fields: [fk_client_id], references: [id])
  fk_establishment_id String
  establishment       Establishment      @relation(fields: [fk_establishment_id], references: [id])
  fk_employee_id      String
  employee            Employee           @relation(fields: [fk_employee_id], references: [id])
  ordered_Services    Ordered_Services[]
  created_at          DateTime?          @default(now())
  updated_at          DateTime?          @default(now())
}

model Ordered_Services {
  id            String   @id @default(uuid())
  service       Services @relation(fields: [fk_id_service], references: [id])
  fk_id_service String
  ordered       Ordered  @relation(fields: [fk_id_ordered], references: [id])
  fk_id_ordered String
  created_at    DateTime @default(now())
}
